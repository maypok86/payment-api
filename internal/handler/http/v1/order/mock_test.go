// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package order_test is a generated GoMock package.
package order_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/maypok86/payment-api/internal/domain/order"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockService) CancelOrder(ctx context.Context, dto order.CancelDTO) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, dto)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockServiceMockRecorder) CancelOrder(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockService)(nil).CancelOrder), ctx, dto)
}

// CreateOrder mocks base method.
func (m *MockService) CreateOrder(ctx context.Context, dto order.CreateDTO) (order.Order, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, dto)
	ret0, _ := ret[0].(order.Order)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServiceMockRecorder) CreateOrder(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockService)(nil).CreateOrder), ctx, dto)
}

// PayForOrder mocks base method.
func (m *MockService) PayForOrder(ctx context.Context, dto order.PayForDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayForOrder", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayForOrder indicates an expected call of PayForOrder.
func (mr *MockServiceMockRecorder) PayForOrder(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayForOrder", reflect.TypeOf((*MockService)(nil).PayForOrder), ctx, dto)
}
