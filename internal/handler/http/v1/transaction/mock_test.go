// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package transaction_test is a generated GoMock package.
package transaction_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	transaction "github.com/maypok86/payment-api/internal/domain/transaction"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetTransactionsByAccountID mocks base method.
func (m *MockService) GetTransactionsByAccountID(ctx context.Context, senderID int64, listParams transaction.ListParams) ([]transaction.Transaction, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByAccountID", ctx, senderID, listParams)
	ret0, _ := ret[0].([]transaction.Transaction)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransactionsByAccountID indicates an expected call of GetTransactionsByAccountID.
func (mr *MockServiceMockRecorder) GetTransactionsByAccountID(ctx, senderID, listParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByAccountID", reflect.TypeOf((*MockService)(nil).GetTransactionsByAccountID), ctx, senderID, listParams)
}
